/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp4_tache1;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

/**
 *
 * @author Felix
 */
public class ETLForm extends javax.swing.JPanel {

    private Connection dbConnection;
    
    //Map timestamp to date id
    private HashMap<Long, Integer> dateCache = new HashMap<>();
    
    //Map clientid to firstlocation timestamp
    private HashMap<Integer, Long> firstLocationCache = new HashMap<>();
    
    /**
     * Creates new form ETLForm
     */
    public ETLForm(Connection dbConnection) {
        this.dbConnection = dbConnection;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGenerateTime = new javax.swing.JButton();
        btnGenerateDates = new javax.swing.JButton();
        btnImportData = new javax.swing.JButton();

        btnGenerateTime.setLabel("Generate Time");
        btnGenerateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateTimeActionPerformed(evt);
            }
        });

        btnGenerateDates.setLabel("Generate Dates");
        btnGenerateDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateDatesActionPerformed(evt);
            }
        });

        btnImportData.setLabel("Import Data");
        btnImportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnImportData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGenerateDates)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerateTime)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImportData, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerateTime)
                    .addComponent(btnGenerateDates))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Fill out DIMENSION_CLIENT table
     * Requires firstLocationCache to be filled
     */
    private void ExtractClients(){
        ResultSet rs = null;
        PreparedStatement insertStmt = null;
        Statement selectStmt = null;
        
        try{
            selectStmt = dbConnection.createStatement();
            selectStmt.executeQuery("DELETE FROM DIMENSION_CLIENT");
            
            insertStmt = dbConnection.prepareStatement("INSERT INTO DIMENSION_CLIENT(idClient, name, ageGroup, firstLocation, postalCode, city, province)"
                                                     + " VALUES(?, ?, ?, ?, ?, ?, ?)");
            
            rs = selectStmt.executeQuery("select * from clients c join personnes p on c.idclient = p.idpersonne");
            
            int i = 0;
            
            while(rs.next()){
                int idClient = rs.getInt("idClient");
                Long firstLocation = firstLocationCache.get(idClient);
                
                insertStmt.setInt(1, idClient);
                insertStmt.setNString(2, rs.getNString("prenom") + " " + rs.getNString("nom"));
                insertStmt.setInt(3, getAgeGroup(rs.getDate("datenaissance")));
                insertStmt.setDate(4, firstLocation != null ? new java.sql.Date(firstLocation) : null);
                insertStmt.setNString(5, rs.getNString("codepostal"));
                insertStmt.setNString(6, rs.getNString("ville"));
                insertStmt.setNString(7, rs.getNString("province"));
                insertStmt.addBatch();
                
                if((i+1) % 500 == 0){
                    insertStmt.executeBatch();
                }
                
                i++;
            }
            
            insertStmt.executeBatch();
        }
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
        finally{
            try{
                if(rs!= null) rs.close(); 
                if(selectStmt != null) selectStmt.close();
                if(insertStmt != null) insertStmt.close();
            } catch(Exception e) {
                System.out.println(e.getMessage());
            };
        }
                
    }
    
    /**
     * Fill out FACT_LOCATION from the external db ratings
     */
    private void ExtractRatings(){       
        Statement deleteStmt = null;
        ResultSet coteRs = null;
        Statement coteSelectStmt = null;
        PreparedStatement factInsertStmt = null;
        
        try{
            deleteStmt = dbConnection.createStatement();   
            deleteStmt.execute("DELETE FROM FACT_LOCATION");
            
            factInsertStmt = dbConnection.prepareStatement("INSERT INTO FACT_LOCATION(IDDATE, IDTIME, IDFILM, IDCLIENT) VALUES(?, ?, ?, ?)");
                    
            coteSelectStmt = dbConnection.createStatement();
            
            
            coteRs = coteSelectStmt.executeQuery("select * from LOG6601C.COTES@LINK_66027"); 
            
            int i = 0;
            
            while(coteRs.next()){
                int cliendId = coteRs.getInt("IDCLIENT");
                long coteDate = coteRs.getDate("DATEENTREE").getTime();
                
                //Set firstlocation date for client
                if(firstLocationCache.containsKey(cliendId)){
                    if(firstLocationCache.get(cliendId) > coteDate)
                        firstLocationCache. replace(cliendId, coteDate);
                } else {
                    firstLocationCache.put(cliendId, coteDate);
                }
                    
                factInsertStmt.setInt(1, dateCache.get(coteDate));
                factInsertStmt.setInt(2, 0);
                factInsertStmt.setInt(3, coteRs.getInt("IDFILM"));
                factInsertStmt.setInt(4, cliendId);
                factInsertStmt.addBatch();
                
                if((i+1) % 500 == 0){
                    factInsertStmt.executeBatch();
                }
                
                i++;
            }
            
            factInsertStmt.executeBatch();
        }
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
        finally{
            try{
                if(coteRs!= null) coteRs.close(); 
                if(coteSelectStmt != null) coteSelectStmt.close();
                if(factInsertStmt!= null) factInsertStmt.close(); 
            } catch(Exception e) {
                System.out.println(e.getMessage());
            };
        }
    }
    
    /**
     * Generate a hashmap with the date and their id
     */
    private void GenerateDateCache(){        
        ResultSet rs = null;
        Statement selectStmt = null;
        
        try{
            selectStmt = dbConnection.createStatement();

            rs = selectStmt.executeQuery("select * from DIMENSION_DATE");            
            while(rs.next()){
                dateCache.put(rs.getDate("fulldate").getTime(), rs.getInt("iddate"));
            }
        }
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
        finally{
            try{
                if(rs!= null) rs.close(); 
                if(selectStmt != null) selectStmt.close();
            } catch(Exception e) {
                System.out.println(e.getMessage());
            };
        }
    }
    
    /**
     * FIll out DIMENSION_FILM
     */
    public void ExtractFilm(){        
        ResultSet filmSelectRs = null;
        ResultSet genreSelectRs = null;
        ResultSet paysSelectRs = null;
        PreparedStatement genreSelectStmt = null;
        PreparedStatement paysSelectStmt = null;
        PreparedStatement filmInsertStmt = null;
        Statement filmSelectStmt = null;
        
        ArrayList<String> genresFound = new ArrayList();
        ArrayList<String> paysFound = new ArrayList();
        
        try{     
            filmSelectStmt = dbConnection.createStatement();   
            filmSelectStmt.execute("DELETE FROM DIMENSION_FILM");
            
            genreSelectStmt = dbConnection.prepareStatement("SELECT g.Titre FROM FILMGENRES fg JOIN GENRES g ON fg.idgenre = g.idgenre WHERE fg.idfilm = ?");
            paysSelectStmt = dbConnection.prepareStatement("SELECT nom FROM FILMPAYS fp JOIN PAYS p ON fp.idpays = p.idpays WHERE fp.idfilm = ?");
            filmInsertStmt = dbConnection.prepareStatement("INSERT INTO DIMENSION_FILM(idfilm, title, year, origin, isComedy, isFamily,"
                    + "isRomance, isDrama, isAnimation, isFantasy, isBiography, isThriller, isScifi, isCrime, isSport, isHorror,"
                    + "isFilmNoir, isMystery, isWestern, isWar, isMusical, isDocumentary, isHistory, isMusic, isAction, isAdventure) "
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            
            filmSelectRs = filmSelectStmt.executeQuery("select * from films");
            
            while(filmSelectRs.next()){
                genresFound.clear();
                paysFound.clear();
                
                //Get genre for film
                genreSelectStmt.setInt(1, filmSelectRs.getInt("idfilm"));
                genreSelectRs = genreSelectStmt.executeQuery();
                
                while(genreSelectRs.next()){
                    genresFound.add(genreSelectRs.getNString(1));
                }
                
                //Get pays for film
                paysSelectStmt.setInt(1, filmSelectRs.getInt("idfilm"));
                paysSelectRs = paysSelectStmt.executeQuery();
                
                while(paysSelectRs.next()){
                    paysFound.add(paysSelectRs.getNString(1));
                }
                
                filmInsertStmt.setInt(1, filmSelectRs.getInt("idfilm"));
                filmInsertStmt.setNString(2, filmSelectRs.getNString("titre"));
                filmInsertStmt.setInt(3, filmSelectRs.getInt("anneesortie"));
                filmInsertStmt.setNString(4, paysFound.contains("USA") ? "USA" : "OTHER");
                filmInsertStmt.setString(5, genresFound.contains("Comedy") ? "Y" : "N");
                filmInsertStmt.setString(6, genresFound.contains("Family") ? "Y" : "N");
                filmInsertStmt.setString(7, genresFound.contains("Romance") ? "Y" : "N");
                filmInsertStmt.setString(8, genresFound.contains("Drama") ? "Y" : "N");
                filmInsertStmt.setString(9, genresFound.contains("Animation") ? "Y" : "N");
                filmInsertStmt.setString(10, genresFound.contains("Fantasy") ? "Y" : "N");
                filmInsertStmt.setString(11, genresFound.contains("Biography") ? "Y" : "N");
                filmInsertStmt.setString(12, genresFound.contains("Thriller") ? "Y" : "N");
                filmInsertStmt.setString(13, genresFound.contains("Sci-Fi") ? "Y" : "N");
                filmInsertStmt.setString(14, genresFound.contains("Crime") ? "Y" : "N");
                filmInsertStmt.setString(15, genresFound.contains("Sport") ? "Y" : "N");
                filmInsertStmt.setString(16, genresFound.contains("Horror") ? "Y" : "N");
                filmInsertStmt.setString(17, genresFound.contains("Film-Noir") ? "Y" : "N");
                filmInsertStmt.setString(18, genresFound.contains("Mystery") ? "Y" : "N");
                filmInsertStmt.setString(19, genresFound.contains("Western") ? "Y" : "N");
                filmInsertStmt.setString(20, genresFound.contains("War") ? "Y" : "N");
                filmInsertStmt.setString(21, genresFound.contains("Musical") ? "Y" : "N");
                filmInsertStmt.setString(22, genresFound.contains("Documentary") ? "Y" : "N");
                filmInsertStmt.setString(23, genresFound.contains("History") ? "Y" : "N");
                filmInsertStmt.setString(24, genresFound.contains("Music") ? "Y" : "N");
                filmInsertStmt.setString(25, genresFound.contains("Action") ? "Y" : "N");
                filmInsertStmt.setString(26, genresFound.contains("Adventure") ? "Y" : "N");
                filmInsertStmt.addBatch();
            }
            
            filmInsertStmt.executeBatch();
        }
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
        finally{
            try{
                if(filmSelectRs!= null) filmSelectRs.close(); 
                if(genreSelectRs != null) genreSelectRs.close();
                if(genreSelectStmt != null) genreSelectStmt.close();
                if(paysSelectRs != null) paysSelectRs.close();
                if(paysSelectStmt != null) paysSelectStmt.close();
                if(filmInsertStmt != null) filmInsertStmt.close();
                if(filmSelectStmt != null) filmSelectStmt.close();
            } catch(Exception e) {
                System.out.println(e.getMessage());
            };
        }   
    }
    
    /**
     * Return the age group rounded to nearest 5
     */
    private static int getAgeGroup(Date birthDate) {
        Calendar a = Calendar.getInstance();
        a.setTime(birthDate);
        
        Calendar b = Calendar.getInstance();
        
        int age = b.get(Calendar.YEAR) - a.get(Calendar.YEAR);
        if (a.get(Calendar.MONTH) > b.get(Calendar.MONTH) || 
            (a.get(Calendar.MONTH) == b.get(Calendar.MONTH) && a.get(Calendar.DATE) > b.get(Calendar.DATE))) {
            age--;
        }
        
        return age % 5 > 2 ? ((age/5)*5) + 5  :  ((age/5)*5);
    }
    
    private void btnGenerateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateTimeActionPerformed
        try{
            Statement stmt = dbConnection.createStatement();
            for(int i = 0; i < 24; i++){
                String insert = "INSERT INTO DIMENSION_TIME(hour) VALUES(" + i +")";
                stmt.addBatch(insert);
            }
            stmt.executeBatch();
        } 
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnGenerateTimeActionPerformed

    private void btnGenerateDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateDatesActionPerformed
        try{
            PreparedStatement stmt = dbConnection.prepareStatement("INSERT INTO DIMENSION_DATE(fullDate, dayOfTheWeek, month, year) VALUES(?, ?, ?, ?)");
            SimpleDateFormat dayOfWeekFormat = new SimpleDateFormat("EEEE");
            SimpleDateFormat monthOfYear = new SimpleDateFormat("MMMM");
            
            Date startDate = new Date(30, 0, 1);
            Date endDate = new Date(116, 0, 1);
            
            Calendar start = Calendar.getInstance();
            start.setTime(startDate);
            Calendar end = Calendar.getInstance();
            end.setTime(endDate);

            for (Date date = start.getTime(); !start.after(end); start.add(Calendar.DATE, 1), date = start.getTime()) {
                
                stmt.setDate(1, new java.sql.Date(date.getTime()));
                stmt.setNString(2, dayOfWeekFormat.format(date));
                stmt.setNString(3, monthOfYear.format(date));
                stmt.setInt(4, start.get(Calendar.YEAR));
                stmt.execute();
            }
        } 
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnGenerateDatesActionPerformed

    private void btnImportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportDataActionPerformed
        GenerateDateCache();
        ExtractFilm();
        ExtractRatings();
        ExtractClients();
        
    }//GEN-LAST:event_btnImportDataActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerateDates;
    private javax.swing.JButton btnGenerateTime;
    private javax.swing.JButton btnImportData;
    // End of variables declaration//GEN-END:variables
}
